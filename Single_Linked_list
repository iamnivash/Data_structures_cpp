#include<bits/stdc++.h>
using namespace std;

//Linked list Node Definition
struct node{
    int data;
    node *next;
};

//Node Creation
node *creation_of_node(int data)
{
    node *newnode = new node; //   
    newnode->data = data;
    newnode->next = NULL;
    return newnode;
}


//Insertion at begining
void insertion_at_begin(node **head, int data)
{
    node *newnode = creation_of_node(data);
    if(*head==NULL)
    {
        *head = newnode;
    }
    else{
        newnode->next = *head;
        *head = newnode;
    }
}

//Inserting at end
void insertion_at_end(node **head, int data)
{
    node *newnode = creation_of_node(data);
    if(*head==NULL)
    {
        *head = newnode;
    }
    else
    {
        node *temp;
        for(temp = *head; temp->next!=NULL;temp=temp->next);  //Iterate till last element
        temp->next=newnode;
    
    }
}


//Insertion at middle
void insertion_at_middle(node **head, int data)
{
    node *newnode = creation_of_node(data);
    if(*head==NULL)
    {
        *head = newnode;
    }
    else
    {
        int position;
        cout<<"Enter the position that you want to insert-> ";
        cin>>position;
        if(position == 1)
        {
            newnode->next = *head;
            *head = newnode;
        }
        else
        {
        int count = 1;
        node *temp,*prev;
        for(temp = *head;temp!=NULL;temp=temp->next)
        {
            if(count==position)
                break;
            count++;
            prev=temp;
        }
        newnode->next = temp;
        prev->next = newnode;
        }
    }
}

//Deletion at begining
void deletion_at_begin(node **head)
{
    if(*head==NULL)
    {
        cout<<"LL is empty";

    }
    
        node *temp = *head;
        *head = (*head)->next;
        delete temp;
}

//Deletion at end
void deletion_at_end(node **head)
{
    if(*head==NULL)
    {
        cout<<"LL is empty";
    }
    node *temp,*prev;
    for(temp=*head;temp->next!=NULL;temp=temp->next)
    {
        prev=temp;
    }
    prev->next=NULL;
}

//Search and delete
void search_and_delete(node **head)
{
    if(*head==NULL)
    {
        cout<<"LL is empty";
    }
    else
    {
        int sedata;
        cout<<"Enter the data to delete-> ";
        cin>>sedata;
        node *temp,*prev,*todelete;
        for(temp=*head;temp->next!=NULL;temp=temp->next)
        {
            if(temp->data==sedata)
            {
                break;
            }
            prev = temp;
        }
        if(temp==NULL)
        {
            cout<<"Invalid Data";
        }
        else if(temp==*head)
        {
            todelete=*head;
            *head = (*head)->next;
            delete todelete;
        }
        else
        {
            todelete = temp;
            prev->next = temp->next;
            delete todelete;
        }
    }
    
}

//displaying values
void traversal(node *head)
{
    node * temp;
    for(temp=head;temp!=NULL;temp=temp->next)
    {
        cout<<temp->data<<" ";
    }
}


void reversing_the_LL(node **head)
{
    if(*head==NULL)
    {
        cout<<"LL is empty";
        return;
    }
    else
    {
        node *temp,*prev,*safe;
        temp=*head;
        prev=NULL;
        
        while(temp!=NULL)
        {
            safe  = temp->next;
            temp->next = prev;
            prev = temp;
            temp = safe;
            
        }
        *head=prev;
    }
}


//Dispay elements using Recursion
void display_rescursive(node *head)
{
    node *temp = head;
    if(temp==NULL)
    {
        return;
    }
    display_rescursive(temp->next);
    cout<<temp->data<<" ";
    
}



int main()
{
    node *head = NULL;
    while(1)
    {
        int data;
        cin>>data;
        if(data == -1)
        {
            break;
        }
        //insertion_at_begin(&head, data);
        insertion_at_end(&head, data);
    }
    cout<<"                          LINKED LIST OPERATIONS                        "<<endl;
    cout<<"1.Insert Data at position.\n2.Delete at begin.\n3.Delete at end.\n4.Search and delete.\n5.Reverse the Linked list.\n"; 
    cout<<"Enter the Operation -> ";
    int op;
    cin>>op;
    switch(op)
    {
        case 1: int newdata;
        cout<<"Enter the data that you want to insert-> ";
        cin>>newdata;
        insertion_at_middle(&head,newdata);
        traversal(head);
        break;
        case 2: deletion_at_begin(&head);
        traversal(head);
        break;
        case 3: deletion_at_end(&head);
        traversal(head);
        break;
        case 4: search_and_delete(&head);
        traversal(head);
        break;
        case 5: cout<<"Reverse Traversal -> ";
        reversing_the_LL(&head);
        traversal(head);
        break;
        default : cout<<"!!!INVALID!!!";
    }
    //display_rescursive(head);
    return 0;
    
    
}
